tosca_definitions_version: cloudify_dsl_1_3

imports:
imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - plugin.yaml
  # - http://www.getcloudify.org/spec/kubernetes-plugin/1.4.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-openstack-plugin/2.2.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-diamond-plugin/1.3.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-fabric-plugin/1.5/plugin.yaml

inputs:

  configuration_file_content:
    type: string

  image:
    description: Image to be used when launching agent VMs
    default: { get_secret: centos_core_image }

  flavor:
    description: Flavor of the agent VMs
    default: { get_secret: large_image_flavor }

  agent_user:
    description: >
      User for connecting to agent VMs
    default: centos

  app_name:
    default: apps

  security_group:
    default: { concat: [ 'secgrp_', { get_input: app_name } ] }

  join_command:
    type: string

  kubernetes_master_ip:
    type: string

  kubernetes_master_agent_user:
    default: { get_input: agent_user }

  appa_definition:
    default:
      apiVersion: v1
      metadata:
        name: appa
      spec:
        selector:
          matchLabels:
            app: appa
        containers:
        - name: nginx
          image: nginx:1.7.9
          ports:
          - containerPort: 80

  appb_definition:
    default:
      apiVersion: v1
      metadata:
        name: appb
      spec:
        selector:
          matchLabels:
            app: appb
        containers:
        - name: nginx
          image: nginx:1.7.9
          ports:
          - containerPort: 80

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_types:

  cloudify.nodes.Kubernetes.Node:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/configure_node.py
          inputs:
            join_command:
              default: { get_input: join_command }
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/tasks.py
            task_name:
              default: label_node
            task_properties:
              default:
                hostname: { get_attribute: [ SELF, hostname ] }
                labels: { get_input: labels }
            fabric_env:
              default:
                host_string: { get_input: kubernetes_master_ip }
                user: { get_input: kubernetes_master_agent_user }
                key: { get_secret: agent_key_private }
#        stop:
#          implementation: fabric.fabric_plugin.tasks.run_task
#          inputs:
#            tasks_file:
#              default: scripts/tasks.py
#            task_name:
#              default: stop_node
#            task_properties:
#              default:
#                hostname: { get_attribute: [ SELF, hostname ] }
#            fabric_env:
#              default:
#                host_string: { get_input: kubernetes_master_ip }
#                user: { get_input: kubernetes_master_agent_user }
#                key: { get_secret: agent_key_private }
        delete:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/tasks.py
            task_name:
              default: delete_node
            task_properties:
              default:
                hostname: { get_attribute: [ SELF, hostname ] }
            fabric_env:
              default:
                host_string: { get_input: kubernetes_master_ip }
                user: { get_input: kubernetes_master_agent_user }
                key: { get_secret: agent_key_private }

node_templates:

  appb:
    type: cloudify.kubernetes.resources.Pod
    properties:
      definition: { get_input: appb_definition }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: k8s
      - type: cloudify.relationships.depends_on
        target: kubernetes_node_appb

  appa:
    type: cloudify.kubernetes.resources.Pod
    properties:
      definition: { get_input: appa_definition }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: k8s
      - type: cloudify.relationships.depends_on
        target: kubernetes_node_appa

  k8s:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: configuration_file_content }

  kubernetes_node_appb:
    type: cloudify.nodes.Kubernetes.Node
    relationships:
      - type: cloudify.relationships.contained_in
        target: openstack_server_appb
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            task_properties:
              hostname: { get_attribute: [ SELF, hostname ] }
              labels:
                app: appb

  openstack_server_appb:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: ''
        flavor: ''
      management_network_name: { get_property: [ private_network, resource_id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - target: openstack_port_appb
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}
                ProcessResourcesCollector:
                  config:
                    enabled: true
                    unit: B
                    measure_collector_time: true
                    cpu_interval: 0.5
                    process:
                      hyperkube:
                        name: hyperkube

  openstack_port_appb:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - type: cloudify.relationships.connected_to
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  kubernetes_node_appa:
    type: cloudify.nodes.Kubernetes.Node
    relationships:
      - type: cloudify.relationships.contained_in
        target: openstack_server_appa
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            task_properties:
              hostname: { get_attribute: [ SELF, hostname ] }
              labels:
                app: appa

  openstack_server_appa:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: ''
        flavor: ''
      management_network_name: { get_property: [ private_network, resource_id ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - target: openstack_port_appa
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}
                ProcessResourcesCollector:
                  config:
                    enabled: true
                    unit: B
                    measure_collector_time: true
                    cpu_interval: 0.5
                    process:
                      hyperkube:
                        name: hyperkube

  openstack_port_appa:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: k8s_node_scaling_tier
      - type: cloudify.relationships.connected_to
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: { get_input: security_group }
        description: kubernetes master security group
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        port: 22
      - remote_ip_prefix: 0.0.0.0/0
        port: 53
      - remote_ip_prefix: 0.0.0.0/0
        port: 53
        protocol: udp
      - remote_ip_prefix: 0.0.0.0/0
        port: 80
      - remote_ip_prefix: 0.0.0.0/0
        port: 443
      - remote_ip_prefix: 0.0.0.0/0
        port: 2379
      - remote_ip_prefix: 0.0.0.0/0
        port: 4001
      - remote_ip_prefix: 0.0.0.0/0
        port: 4789
      - remote_ip_prefix: 0.0.0.0/0
        port: 6443
      - remote_ip_prefix: 0.0.0.0/0
        port: 6783
        protocol: tcp
      - remote_ip_prefix: 0.0.0.0/0
        port: 6783
        protocol: udp
      - remote_ip_prefix: 0.0.0.0/0
        port: 6784
        protocol: tcp
      - remote_ip_prefix: 0.0.0.0/0
        port: 6784
        protocol: udp
      - remote_ip_prefix: 0.0.0.0/0
        port: 8000
      - remote_ip_prefix: 0.0.0.0/0
        port: 8080
      - remote_ip_prefix: 0.0.0.0/0
        port: 9090
      - remote_ip_prefix: 0.0.0.0/0
        port: 10250

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_name }
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: private_network_name }

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }

  k8s_node_scaling_tier:
    type: cloudify.nodes.Root

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        groups:
          - docker
        users:
          - name: { get_input: agent_user }
            primary-group: wheel
            groups: docker
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }
        write_files:
          - path: /etc/yum.repos.d/kubernetes.repo
            owner: root:root
            permissions: '0444'
            content: |
              # installed by cloud-init
              [kubernetes]
              name=Kubernetes
              baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
              enabled=1
              gpgcheck=1
              repo_gpgcheck=1
              gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                     https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        packages:
          - [docker, 1.12.6-28.git1398f24.el7.centos]
          - [kubelet, 1.6.4-0]
          - [kubeadm, 1.6.4-0]
          - [kubectl, 1.6.4-0]
          - [kubernetes-cni, 0.5.1-0]
        runcmd:
          - [ systemctl, enable, docker ]
          - [ systemctl, start, docker ]
          - [ systemctl, enable, kubelet ]
          - [ systemctl, start, kubelet ]
          - [ mkdir, '-p', /tmp/data ]
          - [ chmod, 'a+rwtp', /tmp/data ]
          - [ chcon, '-Rt', svirt_sandbox_file_t, /tmp/data ]
