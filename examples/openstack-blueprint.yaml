tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-openstack-plugin/2.2.0/plugin.yaml
  - simple-example-blueprint.yaml

inputs:

  join_command:
    type: string

  image:
    description: Image to be used when launching agent VMs

  flavor:
    description: Flavor of the agent VMs

  agent_user:
    description: >
      User for connecting to agent VMs
    default: centos

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }

node_types:

  cloudify.nodes.CloudConfig:
    derived_from: cloudify.nodes.Root
    properties:
      resource_config:
        default:
          encode_base64: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/cloud_config/create.py
          executor: central_deployment_agent

  cloudify.nodes.Kubernetes.Node:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/configure_node.py
          inputs:
            join_command:
              default: { get_input: join_command }

node_templates:

  kubernetes_node:
    type: cloudify.nodes.Kubernetes.Node
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  kubernetes_node_host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
      server:
        key_name: ''
        image: ''
        flavor: ''
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloud_config
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: application_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: kubernetes_deployment_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              security_groups:
              - { get_property: [ kubernetes_deployment_group, security_group, name ] }
              userdata: { get_attribute: [ cloud_config, cloud_config ] }

  cloud_config:
    type: cloudify.nodes.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            cloud_config:
              groups:
                - docker
              users:
                - name: { get_input: agent_user }
                  primary-group: wheel
                  groups: docker
                  shell: /bin/bash
                  sudo: ['ALL=(ALL) NOPASSWD:ALL']
                  ssh-authorized-keys:
                    - { get_secret: agent_key_public }
              write_files:
                - path: /etc/yum.repos.d/kubernetes.repo
                  owner: root:root
                  permissions: '0444'
                  content: |
                    # installed by cloud-init
                    [kubernetes]
                    name=Kubernetes
                    baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
                    enabled=1
                    gpgcheck=1
                    repo_gpgcheck=1
                    gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                           https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
              packages:
                - [docker, 1.12.6-28.git1398f24.el7.centos]
                - [kubelet, 1.6.4-0]
                - [kubeadm, 1.6.4-0]
                - [kubectl, 1.6.4-0]
                - [kubernetes-cni, 0.5.1-0]
              runcmd:
                - [ systemctl, enable, docker ]
                - [ systemctl, start, docker ]
                - [ systemctl, enable, kubelet ]
                - [ systemctl, start, kubelet ]


  kubernetes_deployment_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      resource_id: kubernetes_deployment_group
      security_group:
        name: kubernetes_deployment_group
        description: kubernetes master security group
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        port: 22
      - remote_ip_prefix: 0.0.0.0/0
        port: 53
      - remote_ip_prefix: 0.0.0.0/0
        port: 53
        protocol: udp
      - remote_ip_prefix: 0.0.0.0/0
        port: 80
      - remote_ip_prefix: 0.0.0.0/0
        port: 443
      - remote_ip_prefix: 0.0.0.0/0
        port: 2379
      - remote_ip_prefix: 0.0.0.0/0
        port: 4001
      - remote_ip_prefix: 0.0.0.0/0
        port: 6443
      - remote_ip_prefix: 0.0.0.0/0
        port: 8000
      - remote_ip_prefix: 0.0.0.0/0
        port: 8080
      - remote_ip_prefix: 0.0.0.0/0
        port: 9090
      - remote_ip_prefix: 0.0.0.0/0
        port: 10250

  application_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: public_network_name }

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_secret: external_network_name }
