tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5/plugin.yaml
  - plugin.yaml

inputs:

  kubernetes_master_ip:
    type: string
    default: { get_secret: kubernetes_master_ip }

  kubernetes_master_port:
    type: string
    default: { get_secret: kubernetes_master_port }

  kubernetes_certificate_authority_data:
    default: { get_secret: kubernetes_certificate_authority_data }

  kubernetes-admin_client_certificate_data:
    default: { get_secret: kubernetes-admin_client_certificate_data }

  kubernetes-admin_client_key_data:
    default: { get_secret: kubernetes-admin_client_key_data }

  kubernetes_master_configuration:
    default:
      apiVersion: v1
      kind: Config
      preferences: {}
      current-context: kubernetes-admin@kubernetes
      clusters:
      - name: kubernetes
        cluster:
          certificate-authority-data: { get_input: kubernetes_certificate_authority_data }
          server: { concat: [ 'https://', { get_input: kubernetes_master_ip}, ':', { get_input: kubernetes_master_port } ] }
      contexts:
      - name: kubernetes-admin@kubernetes
        context:
          cluster: kubernetes
          user: kubernetes-admin
      users:
      - name: kubernetes-admin
        user:
          client-certificate-data: { get_input: kubernetes-admin_client_certificate_data }
          client-key-data:  { get_input: kubernetes-admin_client_key_data }

  kubernetes_configuration_file_content:
    description: >
      File content of kubernetes master YAML configuration
    default: { get_input: kubernetes_master_configuration }

  public_dashboard_ip:
    description: >
      The public ip of the Kubernetes Master where dashboard is running
  dashboard_agent_user:
    description: >
      The username of the agent running on the dashboard instance created
      from the image. (The user agent depend on the Iaas provider)

node_types:

  cloudify.nodes.Dashboard.TokenPortData:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/generate_port_token.py
            task_name:
              default: setup_dashboard_access
            fabric_env:
              default:
                host_string: { get_input: public_dashboard_ip }
                user: { get_input: dashboard_agent_user }
                key: { get_secret: agent_key_private }

node_templates:
  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_configuration_file_content }

  dashboard_secret:
    type: cloudify.kubernetes.resources.Secret
    properties:
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard-certs
          namespace: kube-system
        type: Opaque
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  dashboard_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_secret

  dashboard_role:
    type: cloudify.kubernetes.resources.Role
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: kubernetes-dashboard-minimal
          namespace: kube-system
        rules:
          # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.
        - apiGroups: [""]
          resources: ["secrets"]
          verbs: ["create"]
          # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.
        - apiGroups: [""]
          resources: ["configmaps"]
          verbs: ["create"]
          # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
        - apiGroups: [""]
          resources: ["secrets"]
          resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
          verbs: ["get", "update", "delete"]
          # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
        - apiGroups: [""]
          resources: ["configmaps"]
          resourceNames: ["kubernetes-dashboard-settings"]
          verbs: ["get", "update"]
          # Allow Dashboard to get metrics from heapster.
        - apiGroups: [""]
          resources: ["services"]
          resourceNames: ["heapster"]
          verbs: ["proxy"]
        - apiGroups: [""]
          resources: ["services/proxy"]
          resourceNames: ["heapster", "http:heapster:", "https:heapster:"]
          verbs: ["get"]
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_service_account

  dashboard_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: kubernetes-dashboard-minimal
          namespace: kube-system
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: kubernetes-dashboard-minimal
        subjects:
        - kind: ServiceAccount
          name: kubernetes-dashboard
          namespace: kube-system
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_role

  dashboard_deploy:
    type: cloudify.kubernetes.resources.Deployment
    properties:
      definition:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system
        spec:
          replicas: 1
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              k8s-app: kubernetes-dashboard
          template:
            metadata:
              labels:
                k8s-app: kubernetes-dashboard
            spec:
              containers:
              - name: kubernetes-dashboard
                image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2
                ports:
                - containerPort: 8443
                  protocol: TCP
                args:
                  - --auto-generate-certificates
                  # Uncomment the following line to manually specify Kubernetes API server Host
                  # If not specified, Dashboard will attempt to auto discover the API server and connect
                  # to it. Uncomment only if the default does not work.
                  # - --apiserver-host=http://my-address:port
                volumeMounts:
                - name: kubernetes-dashboard-certs
                  mountPath: /certs
                  # Create on-disk volume to store exec logs
                - mountPath: /tmp
                  name: tmp-volume
                livenessProbe:
                  httpGet:
                    scheme: HTTPS
                    path: /
                    port: 8443
                  initialDelaySeconds: 30
                  timeoutSeconds: 30
              volumes:
              - name: kubernetes-dashboard-certs
                secret:
                  secretName: kubernetes-dashboard-certs
              - name: tmp-volume
                emptyDir: {}
              serviceAccountName: kubernetes-dashboard
              # Comment the following tolerations if Dashboard must not be deployed on master
              tolerations:
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_role_binding

  dashboard_service:
    type: cloudify.kubernetes.resources.Service
    properties:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system
        spec:
          type: NodePort
          ports:
            - port: 443
              targetPort: 8443
          selector:
            k8s-app: kubernetes-dashboard
      options:
        namespace: kube-system
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kubernetes_master
    - type: cloudify.relationships.depends_on
      target: dashboard_deploy

  dashboard_admin_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: admin-user
          namespace: kube-system
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_service

  dashboard_service_account_cluster_role:
    type: cloudify.kubernetes.resources.ClusterRoleBinding
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: admin-user
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kube-system
      options:
        namespace: kube-system
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master
      - type: cloudify.relationships.depends_on
        target: dashboard_admin_service_account

  dashboard_token_and_port:
    type: cloudify.nodes.Dashboard.TokenPortData
    relationships:
    - target: dashboard_service_account_cluster_role
      type: cloudify.relationships.depends_on

outputs:

  bearer_token:
    description: Kubernetes Token
    value: { get_attribute: [dashboard_token_and_port, bearer_token] }

  dashboard_url:
    description: Kubernetes Access Url
    value: { concat: [ "https://", { get_input: public_dashboard_ip }, ":", { get_attribute: [dashboard_token_and_port, dashboard_port] } ] }
