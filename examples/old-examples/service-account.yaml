tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-kubernetes-plugin

inputs:

  kubernetes_master_public_ip:
    type: string

  agent_user:
    type: string

  kubernetes_master_ip:
    type: string
    default: { get_secret: kubernetes_master_ip }

  kubernetes_master_port:
    type: string
    default: { get_secret: kubernetes_master_port }

  kubernetes_certificate_authority_data:
    default: { get_secret: kubernetes_certificate_authority_data }

  kubernetes-admin_client_certificate_data:
    default: { get_secret: kubernetes-admin_client_certificate_data }

  kubernetes-admin_client_key_data:
    default: { get_secret: kubernetes-admin_client_key_data }

  kubernetes_master_configuration:
    default:
      apiVersion: v1
      kind: Config
      preferences: {}
      current-context: kubernetes-admin@kubernetes
      clusters:
      - name: kubernetes
        cluster:
          certificate-authority-data: { get_input: kubernetes_certificate_authority_data }
          server: { concat: [ 'https://', { get_input: kubernetes_master_ip}, ':', { get_input: kubernetes_master_port } ] }
      contexts:
      - name: kubernetes-admin@kubernetes
        context:
          cluster: kubernetes
          user: kubernetes-admin
      users:
      - name: kubernetes-admin
        user:
          client-certificate-data: { get_input: kubernetes-admin_client_certificate_data }
          client-key-data:  { get_input: kubernetes-admin_client_key_data }

  kubernetes_configuration_file_content:
    description: >
      File content of kubernetes master YAML configuration
    default: { get_input: kubernetes_master_configuration }

  service_account_name:
    description: A new service account name.
    default: examples-user

  service_account_namespace:
    description: The namespace to create the new service account in.
    default: default

node_templates:

  kubernetes_master:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_configuration_file_content }

  new_service_account:
    type: cloudify.kubernetes.resources.ServiceAccount
    properties:
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  new_role_binding:
    type: cloudify.kubernetes.resources.RoleBinding
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: { get_input: service_account_name }
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: { get_input: service_account_name }
          namespace: { get_input: service_account_namespace }
      options:
        namespace: { get_input: service_account_namespace }
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_master

  set_token:
    type: cloudify.nodes.ApplicationServer
    relationships:
      - type: cloudify.relationships.depends_on
        target: new_role_binding
      - type: cloudify.relationships.depends_on
        target: new_service_account
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/token.py
            task_name: get_token
            task_properties:
              service_account_name: { get_input: service_account_name }
            fabric_env:
              host_string: { get_input: kubernetes_master_public_ip }
              user: { get_input: agent_user }
              key: { get_secret: agent_key_private }
